!Provera starta! 
l0: br (if !START then l0); 
!Citanje instrukcije!
PCout1, MOST1_2, ldMAR, incPC; 
l2: br (if hack then l2);
l3: eMAR, rdCPU, br (if !fcCPU then l3);
MDRout1, ldIR0,ldGPRAR;
br (if !gropr then l7);
br lA9; //stPRCOD
l7:  br (if l1 then l3D);
br (if L1_arlog then l19);
PCout1, MOST1_2, ldMAR, incPC;
l9: br (if hack then l9);
lA: eMAR, rdCPU, br (if !fcCPU then lA);
MDRout1, MOST1_3, ldIR1;
br (if !gradr then lE);
br lA9; //stPRADR
lE: br (if ORbranch then l3D);
br (if L2_arlog then l19);
PCout1, MOST1_2, ldMAR, incPC;
l11: br (if hack then l11);
l12: eMAR, rdCPU, br (if !fcCPU then l12);
MDRout1, ldIR2, br (if L3_jump then l3D );
l19: bradr;
!Regdir!
br (if store then l3D);
br (if LDW then l1D);
br(if LOADL then l1D);
GPRout1, ldBB, br l3D;
l1D: GPRout1, MOST1_2, ldBW, br l3D;
!Regindpom!
IRJAout2,ldCW ;
GPRout1, CWout3, ADDout2, ldMAR, br (if store then l3D);
br l31;
!Imm! 
br (if LOADL then l3C);
br (if LDW then l3C);
IRPOMout3,MOST3_2, MOST2_1, ldBB, br l3D;
l3C: IRPOMout3,MOST3_2, ldBW, br l3D; 
!Pcrel!
PCout1, IRPOMout3, ADDout2, ldMAR, br (if store then l3D);
!Citanje operanda!
l31: br (if hack then l31);
l32: eMAR, rdCPU, br (if !fcCPU then l32);
br (if LDW then l35);
br( if LOADL then l38);
MDRout1, ldBB, br l3D;
l35: MDRout1, ldDWH, incMAR;
l36: br (if hack then l36);
l37: eMAR, rdCPU, br (if !fcCPU then l37);
MDRout1, ldDWL;
DWout2, ldBW, br l3D;
l38: MDRout1,MOST1_2,ldBW,br l3D;
l3D: bropr;
!LOADL!
AWHout3,MOST3_2,MOST2_1,ldDWH;
BWout2,MOST2_1,ldDWL;
DWout2,ldAW,br lA9;
!Swap! 
br (if regdir then l42);
ABout3,mxMDR,ldMDR;
l40: br (if hack then l40);
l41: eMAR,eMDR,wrCPU,br (if !fcCPU then l41);
BBout2,MOST2_1,ldAB;
ldN,ldZ,ldC,ldV, br lA9;
l42: ABout3,wrGPR;
BBout2,MOST2_1,ldAB;
ldN,ldZ,ldC,ldV, br lA9;
!Nop!
br lA9;
!Halt!
clSTART, br l0;
!Intd!
clPSWI, br lA9;
!Inte!
stPSWI, br lA9;
!Ld! 
BBout2, MOST2_1, ldAB;
ldN, ldZ, ldC, ldV, br lA9;
!Ldw!
BWout2,ldAW, br lA9;
!Stb!
br (if regdir then l4C);
ABout3, mxMDR, ldMDR;
l49: br (if hack then l49);
l4A: eMAR, eMDR, wrCPU, br (if !fcCPU then l4A);
l4B: br lA9;
l4C: ABout3, wrGPR, br lA9;
!Stw!
br (if regdir then l55);
AWHout3, mxMDR, ldMDR;
l4F: br (if hack then l4F);
l50: eMAR, eMDR, wrCPU, br (if !fcCPU then l50);
AWout3, mxMDR, ldMDR, incMAR;
l52: br (if hack then l52);
l53: eMAR, eMDR, wrCPU, br (if !fcCPU then l53);
br lA9;
l55: AWout3, wrGPR, br lA9;
!Popb!
decSp;
SPout2, ldMAR;
l57: br (if hack then l57);
l58: eMAR, rdCPU, br (if !fcCPU then l58);
MDRout1, ldBB, ldAB;
ldN, ldZ, ldC, ldV, br lA9;
!Pushb!
SPout2, ldMAR, ABout3, mxMDR, ldMDR,incSP;
l65: br (if hack then l65);
l66: eMAR, eMDR, wrCPU, br (if !fcCPU then l66);
br lA9;
!Stivtp!
AWout3, ldIVTP, br lA9;
!Stsp!
AWout3, ldSP, br lA9;
!Add!
BBout2, ABout3, add, ALUout1, ldAB, ldC, ldV;
ldN, ldZ, br lA9;
!Sub!
BBout2, ABout3, sub, ALUout1, ldAB, ldC, ldV;
ldN, ldZ, br lA9;
!And!
BBout2, ABout3, and, ALUout1, ldAB;
ldN, ldZ, ldC, ldV, br lA9;
!Or!
BBout2, ABout3, or, ALUout1, ldAB;
ldN, ldZ, ldC, ldV, br lA9;
!Xor!
BBout2, ABout3, xor, ALUout1, ldAB;
ldN, ldZ, ldC, ldV, br lA9;
!Not!
BBout2,ldAB;
ABout3, not, ALUout1, ldAB;
ldN, ldZ, ldC, ldV, br lA9;
!Asr, Lsr, Ror i Rorc!
shr, ldC;
ldN, ldZ, ldV, br lA9;
!Asl, Lsl, Rol i Rolc!
shl, ldC;
ldN, ldZ, ldV, br lA9;
!Beql,..., Blsseu!
IRBRout3, br (if !brpom then lA9);
PCout1, IRPOMout3, ADDout2, ldPC, br lA9;
!Jmp!
IRJAout2, ldPC, br lA9;
!Jsr!
SPout2, ldMAR, PCHout3, mxMDR, ldMDR;
l91: br (if hack then l91);
l92: eMAR, eMDR, wrCPU, br (if !fcCPU then l92);
incSP;
SPout2, ldMAR, PCLout3, mxMDR, ldMDR;
l95: br (if hack then l95);
l96: eMAR, eMDR, wrCPU, br (if !fcCPU then l96);
IRJAout2, ldPC,incSP, br lA9;
!Rti!
decSP;
SPout2, ldMAR;
l99: br (if hack then l99);
l9A: eMAR, rdCPU, br (if !fcCPU then l9A);
MDRout1, ldPSWL; 
decSP;
SPout2, ldMAR;
l9D: br (if hack then l9D);
l9E: eMAR, rdCPU, br (if !fcCPU then l9E);
MDRout1, ldPSWH;
!Rts!
decSP;
SPout2, ldMAR;
lA1: br (if hack then lA1);
lA2: eMAR, rdCPU, br (if !fcCPU then lA2);
MDRout1, ldDWL;
decSP;
SPout2, ldMAR;
lA5: br (if hack then lA5);
lA6: eMAR, rdCPU, br (if !fcCPU then lA6);
MDRout1, ldDWH;
DWout2, ldPC, br lA9;
!Opsluzivanje prekida!
lA9: br (if !prekid then l0);
!Cuvanje konteksta procesora!
SPout2, ldMAR, PCHout3, mxMDR, ldMDR;
lAC: br (if hack then lAC);
lAD: eMAR, eMDR, wrCPU, br (if !fcCPU then lAD);
incSP;
SPout2, ldMAR, PCLout3, mxMDR, ldMDR;
lB0: br (if hack then lB0);
lB1: eMAR, eMDR, wrCPU, br (if !fcCPU then lB1);
incSP;
SPout2, ldMAR, PSWHout3, mxMDR, ldMDR;
lB4: br (if hack then lB4);
lB5: eMAR, eMDR, wrCPU, br (if !fcCPU then lB5);
incSP;
SPout2, ldMAR, PSWLout3, mxMDR, ldMDR;
lB8: br (if hack then lB8);
lB9: eMAR, eMDR, wrCPU, br (if !fcCPU then lB9);
incSP;
!Utvrdivanje broja ulaza!
UEXTout3, ldBR, br lC5;
!Utvrdivanje adrese prekidne rutine!
lC5: IVTPout1, IVTDSPout3, ADDout2, ldMAR;
lC6: br (if hack then lC6);
lC7: eMAR, rdCPU, br (if !fcCPU then lC7);
MDRout1, ldDWH, incMAR;
lC9: br (if hack then lC9);
lCA: eMAR, rdCPU, br (if !fcCPU then lCA);
MDRout1, ldDWL;
DWout2,ldPC,clPSWI,clPSWT, br l0;
